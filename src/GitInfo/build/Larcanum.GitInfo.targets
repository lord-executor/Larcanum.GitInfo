<Project>
    <Target Name="GitInfoFingerprintFile" BeforeTargets="BeforeBuild">
        <!--
            This target creates a "GitInfo.fingerprint.txt" with the last output of the following git command
            which serves as a fingerprint to detect when the GitInfo class should be re-generated during the build.
            The target runs _before_ every build, but most IDEs do their own trickery with optimizations to avoid
            doing an actual Build whenever possible which can lead to a somewhat stale fingerprint file.
        -->
        <Exec Command="$(GitInfoGitBin) describe --tags --always --dirty"
              EchoOff="true"
              ConsoleToMsBuild="true"
              ContinueOnError="true"
              IgnoreExitCode="true"
              StandardErrorImportance="low"
              StandardOutputImportance="low"
              StdOutEncoding="utf-8"
              WorkingDirectory="$(ProjectDir)">
            <Output TaskParameter="ConsoleOutput" PropertyName="_GitFingerprint" />
            <Output TaskParameter="ExitCode" PropertyName="_GitExitCode" />
        </Exec>

        <!--
            If the output of the command changes compared to the previous file contents, then the file will be written
            which will trigger the source generator.
        -->
        <WriteLinesToFile
                Condition="'$(_GitExitCode)' == '0'"
                File="$(IntermediateOutputPath)GitInfo.fingerprint.txt"
                Lines="$(_GitFingerprint)"
                Overwrite="true"
                WriteOnlyWhenDifferent="true" />
    </Target>

    <Target Name="GitInfoVersion" BeforeTargets="BeforeBuild" Condition="'$(Version)' == '1.0.0' and '$(GitInfoUpdateVersionProp)' == 'true'">
        <!--
            This target sets the $(Version) property based on the git tag description. It uses the same git command as
            the source generator. The target only runs if the $(GitInfoUpdateVersionProp) is enabled AND the $(Version)
            property still has its default value of "1.0.0" which means that it is still possible to override the
            version by specifying it in the project file or passing it via the command line.
        -->
        <Exec Command="$(GitInfoGitBin) describe --tags --always"
              EchoOff="true"
              ConsoleToMsBuild="true"
              ContinueOnError="true"
              IgnoreExitCode="true"
              StandardErrorImportance="low"
              StandardOutputImportance="low"
              StdOutEncoding="utf-8"
              WorkingDirectory="$(ProjectDir)">
            <Output TaskParameter="ConsoleOutput" PropertyName="_GitTag" />
            <Output TaskParameter="ExitCode" PropertyName="_GitExitCode" />
        </Exec>

        <PropertyGroup>
            <!--
                If anything goes wrong or the tag description doesn't contain a semantic version, fall back to using 1.0.0 as the version.
            -->
            <Version Condition="'$(_GitExitCode)' != '0' or !$([System.Text.RegularExpressions.Regex]::IsMatch('$(_GitTag)', '$(GitInfoVersionRegex)'))">1.0.0</Version>
            <!--
                If the tag matches the GitInfoVersionRegex, then we effectively just strip out the prefix since the
                rest is a valid version number in the context of the build.
            -->
            <Version Condition="'$(_GitExitCode)' == '0' and $([System.Text.RegularExpressions.Regex]::IsMatch('$(_GitTag)', '$(GitInfoVersionRegex)'))"
                >$([System.Text.RegularExpressions.Regex]::Replace($(_GitTag), $(GitInfoVersionRegex), "${VERSION}"))</Version>
        </PropertyGroup>

        <Message Text="GitInfo updated Version to '$(Version)' based on git tag '$(_GitTag)'" Importance="normal" />
    </Target>
</Project>
