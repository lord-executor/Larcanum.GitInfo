<Project>
    <ItemGroup>
        <CompilerVisibleProperty Include="GitInfoGlobalNamespace" />
        <CompilerVisibleProperty Include="GitInfoNamespace" />
        <CompilerVisibleProperty Include="GitInfoGitBin" />
        <CompilerVisibleProperty Include="GitInfoVersionRegex" />
        <CompilerVisibleProperty Include="GitInfoGenerateAssemblyVersion" />
        <CompilerVisibleProperty Include="GitInfoDebug" />
    </ItemGroup>

    <ItemGroup>
        <!--
            AdditionalFiles items can be processed by source generators and since the build process does not know if or
            which additional files are used by which analyzer, any change to an additional file seems to trigger the
            all source generators. This effectively ensures that if anything about the git describe result changes,
            the GitInfo code is re-generated during the build. The contents of the file are irrelevnat for the source
            generator (but NOT for the MSBuild process), but the existence of the item is not.
        -->
        <AdditionalFiles Include="$(IntermediateOutputPath)GitInfo.fingerprint.txt" Visible="false" />
    </ItemGroup>

    <PropertyGroup>
        <GitInfoGlobalNamespace Condition="'$(GitInfoGlobalNamespace)' == ''">false</GitInfoGlobalNamespace>
        <GitInfoGitBin Condition="'$(GitInfoGitBin)' == ''">git</GitInfoGitBin>
        <!--
            v?(?<VERSION>(?<MAJOR>\d+)\.(?<MINOR>\d+)(?:\.(?<PATCH>\d+))?(?:[-+](?<LABEL>[\dA-Za-z\-\.]+))?)$
            This regular expression is used to check if the git tag description matches the expected format in both,
            the source generator context and the MSBuild context.
            The named groups MAJOR, MINOR, PATCH and LABEL are used in the source generator to derive the .NET compatible Version
            while the entire VERSION group (everything except the version prefix) is used in the MSBuild context as
            the $(Version) property as the rest of the MSBuild pipeline does its own processing on that version.
        -->
        <GitInfoVersionRegex Condition="'$(GitInfoVersionRegex)' == ''">v?(?&lt;VERSION&gt;(?&lt;MAJOR&gt;\d+)\.(?&lt;MINOR&gt;\d+)(?:\.(?&lt;PATCH&gt;\d+))?(?:[-+](?&lt;LABEL&gt;[\dA-Za-z\-\.]+))?)$</GitInfoVersionRegex>
        <GitInfoUpdateVersionProp Condition="'$(GitInfoUpdateVersionProp)' == ''">true</GitInfoUpdateVersionProp>
        <GitInfoGenerateAssemblyVersion Condition="'$(GitInfoGenerateAssemblyVersion)' == ''">true</GitInfoGenerateAssemblyVersion>
        <GenerateAssemblyVersionAttribute Condition="'$(GitInfoGenerateAssemblyVersion)' == 'true'">false</GenerateAssemblyVersionAttribute>
        <GenerateAssemblyFileVersionAttribute Condition="'$(GitInfoGenerateAssemblyVersion)' == 'true'">false</GenerateAssemblyFileVersionAttribute>
        <GenerateAssemblyInformationalVersionAttribute Condition="'$(GitInfoGenerateAssemblyVersion)' == 'true'">false</GenerateAssemblyInformationalVersionAttribute>
        <GitInfoDebug Condition="'$(GitInfoDebug)' == ''">false</GitInfoDebug>
    </PropertyGroup>
</Project>
